<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shl.crowdfunding.manager.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.shl.crowdfunding.bean.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
    <result column="userpswd" property="userpswd" jdbcType="CHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="CHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.shl.crowdfunding.bean.User" useGeneratedKeys="true" keyProperty="id">
    insert into t_user (id, loginacct, userpswd, 
      username, email, createtime
      )
    values (#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR}, #{userpswd,jdbcType=CHAR}, 
      #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.shl.crowdfunding.bean.User" >
    update t_user
    set loginacct = #{loginacct,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, loginacct, userpswd, username, email, createtime
    from t_user
  </select>
  <select id="querUserLogin" resultMap="BaseResultMap">
     select id, loginacct, userpswd, username, email, createtime
    from t_user where loginacct=#{loginacct} and userpswd=#{userpswd}
  </select>
  <select id="queryTotalSize" resultType="int">
    select count(*) from t_user
    <where>
      <if test="queryText!=null">
         loginacct like concat("%",#{queryText},"%")
      </if>
    </where>
</select>
  <select id="queryDates" resultMap="BaseResultMap">
    select * from t_user
    <where>
      <if test="queryText!=null">
        loginacct like concat("%",#{queryText},"%")
      </if>
    </where>
    order by createtime desc 
    limit #{startpage},#{pagesize}
  </select>
  <delete id="deleteBatchUserByVo" >
    delete from t_user
    where id in
    <foreach collection="datas" open="(" close=")" separator="," item="user">
      #{user.id}
    </foreach>
  </delete>
  <select id="queryAllRole" resultType="Role">
    select * from t_role
  </select>
  <select id="queryAllUserRoleIds" resultType="int">
    select roleid from t_user_role where userid=#{id}
  </select>
  <insert id="saveUserRoleRelationship">
    <foreach collection="data.ids" item="roleid" separator=";">
      insert into t_user_role(userid,roleid) values(#{userid},#{roleid})
    </foreach>
  </insert>
  <delete id="deleteUserRoleRelationship">
    delete from t_user_role where userid=#{userid} and roleid in
    <foreach collection="data.ids" item="roleid" separator="," close=")" open="(">
      #{roleid}
    </foreach>
  </delete>
  <select id="getUserPermissionsByUserId" resultType="permission">
    SELECT DISTINCT t_permission.* FROM t_user,t_user_role,t_role_permission,t_permission
    WHERE t_user.id=t_user_role.userid
    AND t_user_role.roleid=t_role_permission.roleid
    AND t_role_permission.permissionid=t_permission.id
    AND t_user.id=#{id}
    order by t_permission.id
  </select>
</mapper>